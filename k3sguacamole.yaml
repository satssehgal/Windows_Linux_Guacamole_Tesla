###to learn how to use this file be sure to check out https://youtu.be/HL7M5xe15tQ
apiVersion: v1
kind: Namespace
metadata:
  name: guac
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.22.0 (955b78124)
  creationTimestamp: null
  labels:
    io.kompose.service: guac
  name: guac
  namespace: guac
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: guac
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: guac
    spec:
      containers:
        - env:
            - name: EXTENSIONS
              value: auth-totp
          image: oznu/guacamole:armhf
          name: guac
          ports:
            - containerPort: 8080
          resources: {}
          volumeMounts:
            - mountPath: /config
              name: guac-claim0
      restartPolicy: Always
      volumes:
        - name: guac-claim0
          persistentVolumeClaim:
            claimName: guac-claim0
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.22.0 (955b78124)
  creationTimestamp: null
  labels:
    io.kompose.service: guac
  name: guac
  namespace: guac
spec:
  ports:
    - name: "local"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: guac
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: guac-claim0
  name: guac-claim0
  namespace: guac2
spec:
### for the storageClassName you can choose whatever distribtion you like such as your local
### visit https://kubernetes.io/docs/concepts/storage/storage-classes/ for more info
  storageClassName: local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2000Mi
status: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: guac-ingress
  namespace: guac
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    ingress.kubernetes.io/force-ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  rules:
  - host: ###enter your domain name such as mytesla.tk
    http:
      paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: guac
              port:
                number: 8080
  tls:
  - hosts:
    - ###enter your domain name such as mytesla.tk
    secretName: myteslatk-cert-tls ###enter your domain name and -cert-tls such as myteslatk-cert-tls
